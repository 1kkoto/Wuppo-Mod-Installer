package main;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import java.util.Arrays;
import java.util.List;
import com.github.difflib.DiffUtils;
import com.github.difflib.UnifiedDiffUtils;
import com.github.difflib.patch.Patch;
import com.github.difflib.patch.PatchFailedException;

public class Main {
	
	Font font1;
	JLabel titleLabel;
	LaunchHandler cHandler = new LaunchHandler();
	String WuppoPath;
	Path OldFile, NewFile, OutputFile, ModFile, BaseFile;
	File WuppoSave = new File("WuppoSave.txt");
	
	public Main() {
		createFont();
		fileBrowser();
		createUI();
	}
	public void fileBrowser() {
		try {
			if (WuppoSave.createNewFile()) {
			JFileChooser fileChooser = new JFileChooser(".");
			fileChooser.setFileFilter(new FileFilter() {
				public String getDescription() {
					return "executable files (*.exe)";
				}
				public boolean accept(File WuppoSave) {
					if(WuppoSave.isDirectory()) {
						return true;
					} else {
						return WuppoSave.getName().endsWith(".exe");
					}
				}
			});
			fileChooser.setDialogTitle("Choose your Wuppo.exe");
			int response = fileChooser.showOpenDialog(null);
			if (response == JFileChooser.APPROVE_OPTION) {
				File selectedFile = fileChooser.getSelectedFile();
			    if(selectedFile.getName().equals("Wuppo.exe")) {
					WuppoPath = selectedFile.getAbsolutePath();
					FileWriter filewriter = new FileWriter(WuppoSave);
					PrintWriter printwriter = new PrintWriter(filewriter);
					printwriter.print(WuppoPath);
					printwriter.close();
			    } else {
					Path deletePath = Paths.get(System.getProperty("user.dir") + "/WuppoSave.txt");
			        Files.delete(deletePath);
			        System.exit(0);
			}} else {
				Path deletePath = Paths.get(System.getProperty("user.dir") + "/WuppoSave.txt");
		        Files.delete(deletePath);
				System.exit(0);
			} }
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {
		new Main();
	}
	public void createFont() {
		font1 = new Font("Bahnschrift", Font.PLAIN, 42);
		
	}
	
	public void createUI() {
		JFrame window = new JFrame();
		window.setSize(1280, 720);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.getContentPane().setBackground(Color.black);
		window.setTitle("Wuppo Mod Installer");
		window.setLayout(null);
		
		JPanel titlePanel = new JPanel();
		titlePanel.setBounds(320,100,600,42);
		titlePanel.setBackground(Color.black);
		
		window.add(titlePanel);
		titleLabel = new JLabel("WUPPO MOD INSTALLER");
		titleLabel.setForeground(Color.white);
		titleLabel.setFont(font1);
		titlePanel.add(titleLabel);
		
		JPanel launchPanel = new JPanel();
		launchPanel.setBounds(420, 600, 400, 50);
		launchPanel.setBackground(Color.black);
		launchPanel.setLayout(new GridLayout(1,1));
		window.add(launchPanel);
		
		JButton launchButton = new JButton("Launch Wuppo");
		launchButton.setBackground(Color.black);
		launchButton.setFont(font1);
		launchButton.setForeground(Color.white);
		launchButton.setFocusPainted(false);
		launchButton.addActionListener(cHandler);
		launchButton.setActionCommand("launch");
		launchPanel.add(launchButton);
		
		JPanel createPatchPanel = new JPanel();
		createPatchPanel.setBounds(50,600,300,50);
		createPatchPanel.setBackground(Color.black);
		createPatchPanel.setLayout(new GridLayout(1,1));
		window.add(createPatchPanel);
		
		JButton createPatchButton = new JButton ("Create patch");
		createPatchButton.setBackground(Color.black);
		createPatchButton.setFont(font1);
		createPatchButton.setForeground(Color.white);
		createPatchButton.setFocusPainted(false);
		createPatchButton.addActionListener(cHandler);
		createPatchButton.setActionCommand("createPatch");
		createPatchPanel.add(createPatchButton);
		
		JPanel changePathPanel = new JPanel();
		changePathPanel.setBounds(900,100,300,50);
		changePathPanel.setBackground(Color.black);
		changePathPanel.setLayout(new GridLayout(1,1));
		window.add(changePathPanel);
		
		JButton changePathButton = new JButton ("Change path");
		changePathButton.setBackground(Color.black);
		changePathButton.setFont(font1);
		changePathButton.setForeground(Color.white);
		changePathButton.setFocusPainted(false);
		changePathButton.addActionListener(cHandler);
		changePathButton.setActionCommand("changePath");
		changePathPanel.add(changePathButton);
		
		JPanel loadPatchPanel = new JPanel();
		loadPatchPanel.setBounds(900,600,300,50);
		loadPatchPanel.setBackground(Color.black);
		loadPatchPanel.setLayout(new GridLayout(1,1));
		window.add(loadPatchPanel);
		
		JButton loadPatchButton = new JButton("Load Patch");
		loadPatchButton.setBackground(Color.black);
		loadPatchButton.setFont(font1);
		loadPatchButton.setForeground(Color.white);
		loadPatchButton.setFocusPainted(false);
		loadPatchButton.addActionListener(cHandler);
		loadPatchButton.setActionCommand("loadPatch");
		loadPatchPanel.add(loadPatchButton);
		
		Container c = window.getContentPane();
		JLabel splenkhakker = new JLabel();
		splenkhakker.setIcon(new ImageIcon(getClass().getClassLoader().getResource("Splenkhakker.png")));
		Dimension size = splenkhakker.getPreferredSize();
		splenkhakker.setBounds(150,-200, size.width, size.height);
		c.add(splenkhakker);
		
		window.setVisible(true);
	}
	public class LaunchHandler implements ActionListener{
		
		public void actionPerformed(ActionEvent event) {
			
			String action = event.getActionCommand();
			
			switch(action) {
			case "launch":
				Path readPath = Paths.get(System.getProperty("user.dir") + "/WuppoSave.txt");
				try {
					WuppoPath = Files.readAllLines(readPath).get(0);
				} catch (IOException e1) {
					e1.printStackTrace();
				}
					     try {
					    	 Runtime.getRuntime().exec(WuppoPath);
					    	 System.exit(0);
					     } catch (IOException e) {
					    	    e.printStackTrace();}
				break;
			case "createPatch":
				// Choose old file
				JFileChooser OldChooser = new JFileChooser(".");
				OldChooser.setFileFilter(new FileFilter() {
					public String getDescription() {
						return "data files (*.win)";
					}
					public boolean accept(File selectedOld) {
						if(selectedOld.isDirectory()) {
							return true;
						} else {
							return selectedOld.getName().endsWith(".win");
						}
					}
				});
				OldChooser.setDialogTitle("Choose your base data.win");
				int Oldresponse = OldChooser.showOpenDialog(null);
				if (Oldresponse == JFileChooser.APPROVE_OPTION) {
					File selectedOld = OldChooser.getSelectedFile();
				    OldFile = Paths.get(selectedOld.getAbsolutePath());
				    // Choose new file
				    JFileChooser NewChooser = new JFileChooser(".");
					NewChooser.setFileFilter(new FileFilter() {
						public String getDescription() {
							return "data files (*.win)";
						}
						public boolean accept(File selectedNew) {
							if(selectedNew.isDirectory()) {
								return true;
							} else {
								return selectedNew.getName().endsWith(".win");
							}
						}
					});
					NewChooser.setDialogTitle("Choose your modified data.win");
					int Newresponse = NewChooser.showOpenDialog(null);
					if (Newresponse == JFileChooser.APPROVE_OPTION) {
						File selectedNew = NewChooser.getSelectedFile();
					    NewFile = Paths.get(selectedNew.getAbsolutePath());
					    // Specify path for output
					    JFileChooser OutChooser = new JFileChooser(".");
						OutChooser.setDialogTitle("Choose your output destination");
						OutChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
					    OutChooser.setAcceptAllFileFilterUsed(false);
						int Outresponse = OutChooser.showOpenDialog(null);
						if (Outresponse == JFileChooser.APPROVE_OPTION) {
							File selectedOut = OutChooser.getSelectedFile();
						    OutputFile = Paths.get(selectedOut.getAbsolutePath());
						    	//Create Folders
						    	File ModFolder = new File(OutputFile + "/Mod");
						    	if (ModFolder.mkdir()) {
						    	}
								File PatchFolder = new File(OutputFile + "/Mod/Patch");
								if (PatchFolder.mkdir()) {
						    	}
								File DialogueFolder = new File(OutputFile + "/Mod/dialogue");
								if (DialogueFolder.mkdir()) {
						    	}
								File EngFolder = new File(OutputFile + "/Mod/dialogue/ENG");
								if (EngFolder.mkdir()) {
						    	}
								//Create Patch
								try {
									BufferedReader Oldreader = new BufferedReader(
											new InputStreamReader(
													new FileInputStream(selectedOld), StandardCharsets.UTF_8));
									StringBuilder OldStringBuilder = new StringBuilder();
									String OldLine = Oldreader.readLine(); 
									while (OldLine != null) {
										OldStringBuilder.append(OldLine).append("\n");
										OldLine = Oldreader.readLine();
									}
									Oldreader.close();
									String OldFileContent = OldStringBuilder.toString();
									BufferedReader Newreader = new BufferedReader(
											new InputStreamReader(
													new FileInputStream(selectedNew), StandardCharsets.UTF_8));
									StringBuilder NewStringBuilder = new StringBuilder();
									String NewLine = Newreader.readLine();
									while (NewLine != null) {
										NewStringBuilder.append(NewLine).append("\n");
										NewLine = Newreader.readLine();
									}
									Newreader.close();
									String NewFileContent = NewStringBuilder.toString();
									File patchFile = new File(PatchFolder.getAbsolutePath()+"/mod.splenk");
									List<String> originalContent = Arrays.asList(OldFileContent.split("\n"));
									List<String> modifiedContent = Arrays.asList(NewFileContent.split("\n"));
									Patch<String> patch = DiffUtils.diff(originalContent, modifiedContent);
									PrintWriter modwriter = new PrintWriter(patchFile);
									modwriter.print(patch);
									modwriter.close();
									//Done
								} catch (IOException e) {
									e.printStackTrace();
								}
					} else {
						
					}
				} else {
					
				}
				break; }
			case "loadPatch":
				//Choose modified file
				JFileChooser ModChooser = new JFileChooser(".");
				ModChooser.setFileFilter(new FileFilter() {
					public String getDescription() {
						return "splenk files (*.splenk)";
					}
					public boolean accept(File selectedMod) {
						if(selectedMod.isDirectory()) {
							return true;
						} else {
							return selectedMod.getName().endsWith(".splenk");
						}
					}
				});
				ModChooser.setDialogTitle("Choose your mod");
			    ModChooser.setAcceptAllFileFilterUsed(false);
				int Modresponse = ModChooser.showOpenDialog(null);
				if (Modresponse == JFileChooser.APPROVE_OPTION) {
					File selectedMod= ModChooser.getSelectedFile();
				    ModFile = Paths.get(selectedMod.getAbsolutePath());
					//Choose data.win (automatically)
					try {
						String basePath = Files.readAllLines(Paths.get(System.getProperty("user.dir") + "/WuppoSave.txt")).get(0);
						String dataPath = basePath.replace("Wuppo.exe", "data.win");
						File dataPathFile = Paths.get(dataPath).toFile();
						//Patch data.win with modified file and save
						List<String> original = Files.readAllLines(new File(dataPath).toPath(), StandardCharsets.UTF_8);
						List<String> mod = Files.readAllLines(ModFile, StandardCharsets.UTF_8);
						Patch<String> modpatch = UnifiedDiffUtils.parseUnifiedDiff(mod);
						try {
							List<String> modresult = DiffUtils.patch(original, modpatch);
							PrintWriter datamodwriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(dataPathFile), StandardCharsets.US_ASCII));
							datamodwriter.print(modresult.toString());
							datamodwriter.close();
						} catch (PatchFailedException e) {
							e.printStackTrace();
						}
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				} else {}
				    
				break;
				
			case "changePath":
				JFileChooser fileChooser = new JFileChooser(".");
				fileChooser.setFileFilter(new FileFilter() {
					public String getDescription() {
						return "executable files (*.exe)";
					}
					public boolean accept(File WuppoSave) {
						if(WuppoSave.isDirectory()) {
							return true;
						} else {
							return WuppoSave.getName().endsWith(".exe");
						}
					}
				});
				fileChooser.setDialogTitle("Choose your Wuppo.exe");
				int response = fileChooser.showOpenDialog(null);
				if (response == JFileChooser.APPROVE_OPTION) {
					File selectedFile = fileChooser.getSelectedFile();
				    if(selectedFile.getName().equals("Wuppo.exe")) {
						WuppoPath = selectedFile.getAbsolutePath();
						FileWriter filewriter = null;
						try {
							filewriter = new FileWriter(WuppoSave);
						} catch (IOException e) {
							e.printStackTrace();
						}
						PrintWriter printwriter = new PrintWriter(filewriter);
						printwriter.print(WuppoPath);
						printwriter.close();
				    } else {
				}} else {
				}
				break;
					 }
				}
			}
			
}
